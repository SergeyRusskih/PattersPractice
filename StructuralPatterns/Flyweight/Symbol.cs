namespace Patterns.StructuralPatterns.Flyweight
{
    /// <summary>
    /// Приспособленец (flyweight) - эффективная поддержка множества мелких объектовы
    /// 
    /// Приспособленец - это разделяемый объект, который можно использовать одновременно в нескольких контекстах.
    /// Он ничего не знает о контексте.
    /// 
    /// Применяется, когда:
    ///     - в приложении используется большое число объектов
    ///     - из-за этого накладные расходы на хранение высоки
    ///     - большую часть состояния объектов можно вынести вовне
    ///     - многие группы объектов можно заменить относительно небольшим количеством разделяемых объектов, поскольку внешнее состояние вынесено
    ///     - приложение не зависит от идентичности объекта (объекты представляют собой value-objects)
    /// 
    /// Участники:
    ///     - <see cref="IGlyph">Flyweight</see> - объявляет интерфейс, с помощью которого приспособленцы могут получать внешнее состояние или как-то воздействовать на него
    ///     - <see cref="Symbol">ConcreteFlyweight</see> - реализует интерфейс класса Flyweight и добавляет при необходимости
    ///       внутреннее состояние.Объект класса ConcreteFlyweight должен быть разделяемым.
    ///       Любое сохраняемое им состояние должно быть внутренним, то есть не зависящим от контекста
    ///     - <see cref="Row">UnsharedConcreteFlyweight</see> - неразделяемый конкретный приспособленец. 
    ///       Hе все подклассы Flyweight обязательно должны быть разделяемыми. Интерфейс Flyweight допускает разделение, но не навязывает его
    ///     - <see cref="GlyphFactory">FlyweightFactory</see> - фабрика приспособленцев. Обеспечивает должное разделение приспособленцев. 
    ///       Когда клиент запрашивает приспособленца, объект FlyweightFactory предоставляет существующий экземпляр или создает новый, если готового еще нет
    /// 
    /// Особенности:
    ///     - вынесение внешнего состояния (например, координаты)
    ///     - часто используется вместе с компановщиком
    /// </summary>
    public class Symbol : IGlyph
    {
        public void Operation(object extrinsicState)
        {
            
        }
    }
}
