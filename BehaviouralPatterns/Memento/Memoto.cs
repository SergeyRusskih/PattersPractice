  
  /// Хранитель - не нарушая инкапсуляции, фиксирует и выносит за пределы объекта 
  ///             его внутреннее состояние так, чтобы позднее можно было восстановить в нем объект.
  /// Применение:
  ///     - необходимо сохранить мгновенный снимок состояния объекта (или его части),
  ///       чтобы впоследствии объект можно было восстановить в том же состоянии
  ///     - прямое получение этого состояния раскрывает детали реализации и нарушает инкапсуляцию объекта
  /// Участники:
  ///     - <see cref="Memento">Хранитель</see> 
  ///         - сохраняет внутреннее состояние объекта Originator. 
  ///           Объем сохраняемой информации может быть различным и определяется 
  ///           потребностями хозяина
  ///         - запрещает доступ всем другим объектам, кроме хозяина
  ///     - <see cref="Originator">Хозяин/see> 
  ///         - создает хранитель, содержащего снимок текущего внутреннего состояния
  ///         - использует хранитель для восстановления внутреннего состояния
  ///     - <see cref="Caretaker">Посыльний</see>
  ///         - отвечает за сохранение хранителя
  ///         - не производит никаких операций над хранителем и не исследует его внутреннее содержимое
  /// Родственные паттерны:
  ///     - команды помещают информацию о состоянии, необходимую для 
  ///       отмены выполненных действий, в хранители
  ///     - хранители можно использовать для итераций
  class Memento
  {
    private string _state;
 
    // Constructor
    public Memento(string state)
    {
      this._state = state;
    }
 
    // Gets or sets state
    public string State
    {
      get { return _state; }
    }
  }