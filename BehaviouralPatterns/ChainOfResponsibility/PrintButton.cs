namespace Patterns.BehaviouralPatterns.ChainOfResponsibility
{
    /// <summary>
    /// Цепочка обязанностей - позволяет избежать привязки отправителя запроса к его получателю, давая шанс обработать запрос нескольким объектам
    /// 
    /// Особенности:
    ///     - связывает объекты-получатели в цепочку и передает запрос вдоль этой цепочки, пока его не обработают
    ///     - у объекта, отправившего запрос, нет информации об обработчике (у запроса анонимный получатель)
    ///     - все объекты в цепочке имеют анонимный интерфейс для обработки запросов и пересылке запроса своему приемнику
    ///     - часто применяется вместе с компановщиком
    /// 
    /// Применимость:
    ///     - есть более одного объекта, способного обработать запрос, причем настоящий обработчик заранее неизвестен и должен быть найден автоматически
    ///     - нужно отправить запрос одному из нескольких объектов, не указывая явно, какому именно
    ///     - набор объектов, способных обработать запрос, должен задаваться динамически
    /// 
    /// Участники:
    ///     - <see cref="Handler">Обработчик</see> 
    ///         - определяет интерфейс для обработки запросов
    ///         - реализует связь с преемником (необязательно)
    ///     - <see cref="ConcreteHander1">Конкретный обработчик</see> 
    ///         - обрабатывает запрос, за который отвечает
    ///         - имеет доступ к своему преемнику
    ///         - если ConcreteHandler способен обработать запрос, то так и делает, если не может, то направляет его - его своему преемнику
    ///     - <see cref="PrintButton">Клиент</see>
    ///         - отправляет запрос некоторому объекту ConcreteHandler в цепочке
    /// </summary>
    public class PrintButton
    {
        public void ProcessRequest()
        {
            var handler1 = new ConcreteHander1();
            var handler2 = new ConcreteHandler2();

            handler2.SetSetSuccessor(handler1);

            handler1.ProcessRequest(20);
        }
    }
}
