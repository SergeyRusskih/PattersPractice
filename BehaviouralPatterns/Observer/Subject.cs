  using System.Collections.Generic;

/// Наблюдатель - определяет зависимость типа «один ко многим» между объектами таким
  ///               образом, что при изменении состояния одного объекта все зависящие от него
  ///               оповещаются об этом и автоматически обновляются
  /// Применение:
  ///     - когда при модификации одного объекта требуется изменить другие
  ///     - когда один объект должен оповещать других, не делая предположений об уведомляемых объектах
  /// Участники:
  ///     - <see cref="Subject">Субъект</see>
  ///         - располагает информацией о своих наблюдателях. За субъектом может
  ///           «следить» любое число наблюдателей;
  ///         - предоставляет интерфейс для присоединения и отделения наблюдателей
  ///     - <see cref="Observer">Наблюдатель</see>
  ///         - определяет интерфейс обновления для объектов, которые должны быть
  ///           уведомлены об изменении субъекта
  ///     - <see cref="ConcreteSubject">Конкретный субъект</see>
  ///         - сохраняет состояние, представляющее интерес для конкретного наблюдателя ConcreteObserver
  ///         - посылает информацию своим наблюдателям, когда происходит изменение
  ///     - <see cref="ConcreteObserver">Конкретный наблюдатель</see>
  ///         - хранит ссылку на объект класса ConcreteSubject
  ///         - сохраняет данные, которые должны быть согласованы с данными субъекта
  ///         - реализует интерфейс обновления, определенный в классе Observer,
  ///           чтобы поддерживать согласованность с субъектом
  /// Родственные паттерны:
  ///     - класс ChangeManager действует как посредник между
  ///       субъектами и наблюдателями, инкапсулируя сложную семантику обновления
  ///     - класс ChangeManager может воспользоваться паттерном одиночка,
  ///       чтобы гарантировать уникальность и глобальную доступность менеджера изменений.
  abstract class Subject
  {
    private List<Observer> _observers = new List<Observer>();

    public void Attach(Observer observer)
    {
      _observers.Add(observer);
    }

    public void Detach(Observer observer)
    {
      _observers.Remove(observer);
    }

    public void Notify()
    {
      foreach (Observer o in _observers)
      {
        o.Update();
      }
    }
  }